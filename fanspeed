#!/usr/bin/env python
# Usage:
# ./fanspeed [show | <fan_speed_pct>]
#
# This script will set the fan speed
# based on ambient system temperature.
#
# Optionally you may simply set the fan
# speed to some constant value.

import sys

# These paths may change from system to system
FAN_PATH = "/sys/class/hwmon/hwmon3/pwm1"
SENSOR_PATH = "/sys/class/thermal/thermal_zone0/temp"

# These lists must be:
# - equal length
# - elements in ascending order
# - elements of BREAK_DEG >= 0
# - elements of BREAK_FAN >= 0 and <= 100
BREAK_DEG = [ 0, 35, 38, 40] # degrees celcius
BREAK_FAN = [40, 70, 80, 100] # fan speed percentage

assert len(BREAK_DEG) == len(BREAK_FAN)

def determineSpeedPct(current_temp):
  for i in range(len(BREAK_DEG), 0, -1):
    if current_temp >= BREAK_DEG[i-1]:
      return BREAK_FAN[i-1]
  return 0

def readTemperature():
  with open(SENSOR_PATH, 'r') as f:
    return int(f.read()) / 1000

def readPWM():
  with open(FAN_PATH, 'r') as f:
    return int(f.read())

# @param {int} pct Must be 0-100
def writePWM(pct):
  # normalize to 0-255
  val = round(255 * pct / 100)
  #print(f"fan speed: {pct}% -> {val}/255")
  with open(FAN_PATH, "w") as f:
    f.write(str(val))

tval = readTemperature()
#print(f"temperature: {tval:.1f}C")
if len(sys.argv) > 1:
  if sys.argv[1] == 'show':
    pct = round(readPWM() / 255 * 100)
    pwm = readPWM()
    print(f"fan speed: {pct}% -> {pwm}/255  {tval}C")
  else:
    pct = int(sys.argv[1])
    assert pct >= 0 and pct <= 100, f"<fan_speed_pct> should be >= 0 and <= 100"
    writePWM(pct)
else:
  writePWM(determineSpeedPct(tval))
